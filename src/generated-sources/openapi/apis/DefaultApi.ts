/* tslint:disable */
/* eslint-disable */
/**
 * dsgt
 * DSGT
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: achau3910@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DSGT,
    DSGTFromJSON,
    DSGTToJSON,
} from '../models';

export interface CreateDSGTRequest {
    dSGT: DSGT;
}

export interface DeleteDSGTRequest {
    dsgtId: string;
}

export interface GetDSGTRequest {
    dsgtId: string;
}

export interface UpdateDSGTRequest {
    dsgtId: string;
    dSGT: DSGT;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Creates a new instance of a `DSGT`.
     * Create a DSGT
     */
    async createDSGTRaw(requestParameters: CreateDSGTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dSGT === null || requestParameters.dSGT === undefined) {
            throw new runtime.RequiredError('dSGT','Required parameter requestParameters.dSGT was null or undefined when calling createDSGT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dsgts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DSGTToJSON(requestParameters.dSGT),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new instance of a `DSGT`.
     * Create a DSGT
     */
    async createDSGT(requestParameters: CreateDSGTRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createDSGTRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an existing `DSGT`.
     * Delete a DSGT
     */
    async deleteDSGTRaw(requestParameters: DeleteDSGTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dsgtId === null || requestParameters.dsgtId === undefined) {
            throw new runtime.RequiredError('dsgtId','Required parameter requestParameters.dsgtId was null or undefined when calling deleteDSGT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dsgts/{dsgtId}`.replace(`{${"dsgtId"}}`, encodeURIComponent(String(requestParameters.dsgtId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing `DSGT`.
     * Delete a DSGT
     */
    async deleteDSGT(requestParameters: DeleteDSGTRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteDSGTRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the details of a single instance of a `DSGT`.
     * Get a DSGT
     */
    async getDSGTRaw(requestParameters: GetDSGTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DSGT>> {
        if (requestParameters.dsgtId === null || requestParameters.dsgtId === undefined) {
            throw new runtime.RequiredError('dsgtId','Required parameter requestParameters.dsgtId was null or undefined when calling getDSGT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dsgts/{dsgtId}`.replace(`{${"dsgtId"}}`, encodeURIComponent(String(requestParameters.dsgtId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DSGTFromJSON(jsonValue));
    }

    /**
     * Gets the details of a single instance of a `DSGT`.
     * Get a DSGT
     */
    async getDSGT(requestParameters: GetDSGTRequest, initOverrides?: RequestInit): Promise<DSGT> {
        const response = await this.getDSGTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of all `DSGT` entities.
     * List All DSGTS
     */
    async getDSGTSRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DSGT>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dsgts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DSGTFromJSON));
    }

    /**
     * Gets a list of all `DSGT` entities.
     * List All DSGTS
     */
    async getDSGTS(initOverrides?: RequestInit): Promise<Array<DSGT>> {
        const response = await this.getDSGTSRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing `DSGT`.
     * Update a DSGT
     */
    async updateDSGTRaw(requestParameters: UpdateDSGTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dsgtId === null || requestParameters.dsgtId === undefined) {
            throw new runtime.RequiredError('dsgtId','Required parameter requestParameters.dsgtId was null or undefined when calling updateDSGT.');
        }

        if (requestParameters.dSGT === null || requestParameters.dSGT === undefined) {
            throw new runtime.RequiredError('dSGT','Required parameter requestParameters.dSGT was null or undefined when calling updateDSGT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dsgts/{dsgtId}`.replace(`{${"dsgtId"}}`, encodeURIComponent(String(requestParameters.dsgtId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DSGTToJSON(requestParameters.dSGT),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing `DSGT`.
     * Update a DSGT
     */
    async updateDSGT(requestParameters: UpdateDSGTRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateDSGTRaw(requestParameters, initOverrides);
    }

}
