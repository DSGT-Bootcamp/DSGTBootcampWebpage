=begin
#dsgt

#DSGT

The version of the OpenAPI document: 1.0.0
Contact: achau3910@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a DSGT
    # Creates a new instance of a `DSGT`.
    # @param dsgt [DSGT] A new &#x60;DSGT&#x60; to be created.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_dsgt(dsgt, opts = {})
      create_dsgt_with_http_info(dsgt, opts)
      nil
    end

    # Create a DSGT
    # Creates a new instance of a &#x60;DSGT&#x60;.
    # @param dsgt [DSGT] A new &#x60;DSGT&#x60; to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_dsgt_with_http_info(dsgt, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_dsgt ...'
      end
      # verify the required parameter 'dsgt' is set
      if @api_client.config.client_side_validation && dsgt.nil?
        fail ArgumentError, "Missing the required parameter 'dsgt' when calling DefaultApi.create_dsgt"
      end
      # resource path
      local_var_path = '/dsgts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dsgt)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_dsgt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_dsgt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a DSGT
    # Deletes an existing `DSGT`.
    # @param dsgt_id [String] A unique identifier for a &#x60;DSGT&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dsgt(dsgt_id, opts = {})
      delete_dsgt_with_http_info(dsgt_id, opts)
      nil
    end

    # Delete a DSGT
    # Deletes an existing &#x60;DSGT&#x60;.
    # @param dsgt_id [String] A unique identifier for a &#x60;DSGT&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_dsgt_with_http_info(dsgt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_dsgt ...'
      end
      # verify the required parameter 'dsgt_id' is set
      if @api_client.config.client_side_validation && dsgt_id.nil?
        fail ArgumentError, "Missing the required parameter 'dsgt_id' when calling DefaultApi.delete_dsgt"
      end
      # resource path
      local_var_path = '/dsgts/{dsgtId}'.sub('{' + 'dsgtId' + '}', CGI.escape(dsgt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_dsgt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_dsgt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a DSGT
    # Gets the details of a single instance of a `DSGT`.
    # @param dsgt_id [String] A unique identifier for a &#x60;DSGT&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [DSGT]
    def get_dsgt(dsgt_id, opts = {})
      data, _status_code, _headers = get_dsgt_with_http_info(dsgt_id, opts)
      data
    end

    # Get a DSGT
    # Gets the details of a single instance of a &#x60;DSGT&#x60;.
    # @param dsgt_id [String] A unique identifier for a &#x60;DSGT&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DSGT, Integer, Hash)>] DSGT data, response status code and response headers
    def get_dsgt_with_http_info(dsgt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_dsgt ...'
      end
      # verify the required parameter 'dsgt_id' is set
      if @api_client.config.client_side_validation && dsgt_id.nil?
        fail ArgumentError, "Missing the required parameter 'dsgt_id' when calling DefaultApi.get_dsgt"
      end
      # resource path
      local_var_path = '/dsgts/{dsgtId}'.sub('{' + 'dsgtId' + '}', CGI.escape(dsgt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DSGT'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_dsgt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_dsgt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All DSGTS
    # Gets a list of all `DSGT` entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<DSGT>]
    def get_dsgts(opts = {})
      data, _status_code, _headers = get_dsgts_with_http_info(opts)
      data
    end

    # List All DSGTS
    # Gets a list of all &#x60;DSGT&#x60; entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DSGT>, Integer, Hash)>] Array<DSGT> data, response status code and response headers
    def get_dsgts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_dsgts ...'
      end
      # resource path
      local_var_path = '/dsgts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DSGT>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_dsgts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_dsgts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a DSGT
    # Updates an existing `DSGT`.
    # @param dsgt_id [String] A unique identifier for a &#x60;DSGT&#x60;.
    # @param dsgt [DSGT] Updated &#x60;DSGT&#x60; information.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_dsgt(dsgt_id, dsgt, opts = {})
      update_dsgt_with_http_info(dsgt_id, dsgt, opts)
      nil
    end

    # Update a DSGT
    # Updates an existing &#x60;DSGT&#x60;.
    # @param dsgt_id [String] A unique identifier for a &#x60;DSGT&#x60;.
    # @param dsgt [DSGT] Updated &#x60;DSGT&#x60; information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_dsgt_with_http_info(dsgt_id, dsgt, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_dsgt ...'
      end
      # verify the required parameter 'dsgt_id' is set
      if @api_client.config.client_side_validation && dsgt_id.nil?
        fail ArgumentError, "Missing the required parameter 'dsgt_id' when calling DefaultApi.update_dsgt"
      end
      # verify the required parameter 'dsgt' is set
      if @api_client.config.client_side_validation && dsgt.nil?
        fail ArgumentError, "Missing the required parameter 'dsgt' when calling DefaultApi.update_dsgt"
      end
      # resource path
      local_var_path = '/dsgts/{dsgtId}'.sub('{' + 'dsgtId' + '}', CGI.escape(dsgt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dsgt)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_dsgt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_dsgt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
